// Package store provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package store

import (
	"context"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi"
	"net/http"
)

type ServerInterface interface {
	// Returns pet inventories by status (GET /store/inventory)
	GetInventory(w http.ResponseWriter, r *http.Request)
	// Place an order for a pet (POST /store/order)
	PlaceOrder(w http.ResponseWriter, r *http.Request)
	// Delete purchase order by ID (DELETE /store/order/{orderId})
	DeleteOrder(w http.ResponseWriter, r *http.Request)
	// Find purchase order by ID (GET /store/order/{orderId})
	GetOrderById(w http.ResponseWriter, r *http.Request)
}

// GetInventory operation middleware
func GetInventoryCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		ctx = context.WithValue(ctx, "api_key.Scopes", []string{""})

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// PlaceOrder operation middleware
func PlaceOrderCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// DeleteOrder operation middleware
func DeleteOrderCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "orderId" -------------
		var orderId int64

		err = runtime.BindStyledParameter("simple", false, "orderId", chi.URLParam(r, "orderId"), &orderId)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter orderId: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "orderId", orderId)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// GetOrderById operation middleware
func GetOrderByIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "orderId" -------------
		var orderId int64

		err = runtime.BindStyledParameter("simple", false, "orderId", chi.URLParam(r, "orderId"), &orderId)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter orderId: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "orderId", orderId)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(GetInventoryCtx)
		r.Get("/store/inventory", si.GetInventory)
	})
	r.Group(func(r chi.Router) {
		r.Use(PlaceOrderCtx)
		r.Post("/store/order", si.PlaceOrder)
	})
	r.Group(func(r chi.Router) {
		r.Use(DeleteOrderCtx)
		r.Delete("/store/order/{orderId}", si.DeleteOrder)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetOrderByIdCtx)
		r.Get("/store/order/{orderId}", si.GetOrderById)
	})

	return r
}
