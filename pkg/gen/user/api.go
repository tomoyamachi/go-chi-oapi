// Package user provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package user

import (
	"context"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi"
	"net/http"
)

type ServerInterface interface {
	// Create user (POST /user)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Creates list of users with given input array (POST /user/createWithList)
	CreateUsersWithListInput(w http.ResponseWriter, r *http.Request)
	// Logs user into the system (GET /user/login)
	LoginUser(w http.ResponseWriter, r *http.Request)
	// Logs out current logged in user session (GET /user/logout)
	LogoutUser(w http.ResponseWriter, r *http.Request)
	// Delete user (DELETE /user/{username})
	DeleteUser(w http.ResponseWriter, r *http.Request)
	// Get user by user name (GET /user/{username})
	GetUserByName(w http.ResponseWriter, r *http.Request)
	// Update user (PUT /user/{username})
	UpdateUser(w http.ResponseWriter, r *http.Request)
}

// CreateUser operation middleware
func CreateUserCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// CreateUsersWithListInput operation middleware
func CreateUsersWithListInputCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// ParamsForLoginUser operation parameters from context
func ParamsForLoginUser(ctx context.Context) *LoginUserParams {
	return ctx.Value("LoginUserParams").(*LoginUserParams)
}

// LoginUser operation middleware
func LoginUserCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// Parameter object where we will unmarshal all parameters from the context
		var params LoginUserParams

		// ------------- Optional query parameter "username" -------------
		if paramValue := r.URL.Query().Get("username"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "username", r.URL.Query(), &params.Username)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter username: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "password" -------------
		if paramValue := r.URL.Query().Get("password"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "password", r.URL.Query(), &params.Password)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter password: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "LoginUserParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// LogoutUser operation middleware
func LogoutUserCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// DeleteUser operation middleware
func DeleteUserCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "username" -------------
		var username string

		err = runtime.BindStyledParameter("simple", false, "username", chi.URLParam(r, "username"), &username)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter username: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "username", username)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// GetUserByName operation middleware
func GetUserByNameCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "username" -------------
		var username string

		err = runtime.BindStyledParameter("simple", false, "username", chi.URLParam(r, "username"), &username)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter username: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "username", username)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// UpdateUser operation middleware
func UpdateUserCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "username" -------------
		var username string

		err = runtime.BindStyledParameter("simple", false, "username", chi.URLParam(r, "username"), &username)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter username: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "username", username)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(CreateUserCtx)
		r.Post("/user", si.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Use(CreateUsersWithListInputCtx)
		r.Post("/user/createWithList", si.CreateUsersWithListInput)
	})
	r.Group(func(r chi.Router) {
		r.Use(LoginUserCtx)
		r.Get("/user/login", si.LoginUser)
	})
	r.Group(func(r chi.Router) {
		r.Use(LogoutUserCtx)
		r.Get("/user/logout", si.LogoutUser)
	})
	r.Group(func(r chi.Router) {
		r.Use(DeleteUserCtx)
		r.Delete("/user/{username}", si.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetUserByNameCtx)
		r.Get("/user/{username}", si.GetUserByName)
	})
	r.Group(func(r chi.Router) {
		r.Use(UpdateUserCtx)
		r.Put("/user/{username}", si.UpdateUser)
	})

	return r
}
